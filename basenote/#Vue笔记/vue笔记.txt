1Vue：无非就是通过Vue对象统一管理数据和函数了。
	不需要通过js或jquery把一个数据放到标签内部了,可以动态渲染 。(当Data中数据变化时，vue会重新渲染与这个数据相关的所有代码)（
	当data中数据变化时，methods中整个页面的所有函数都会重新渲染一遍，不管用没用到data数据，只要页面用到了整个函数就会重新渲染）	computed不会，data中数据变化时，computed只会重新渲染这个相关的函数和页面。
	

1、前端：html、css、javaScript、JQuery

	- js、jquery： 页面当中的元素封装成js或者jquery当中的对象，属性或者方法对当前元素进行相应的操作。
	- 页面加载完毕之后，发送ajax请求，得到数据，数据进行，放到页面当中

2、前端框架：Vue.js、Angular.js、Node.js、React.js 

3、环境的安装：
	- Hbuilder（创建一个Vue项目）
	- npm工具。

4、Vue的课程方向： 11
	- CDN方式引入Vue，Vue的基础知识
		CDN ： 导入外部资源的方式，使用Vue

	- 脚手架项目

5、CDN的方式引入Vue：

6、Vue对象 : Vue对象可以控制页面当中元素，只能对应一个元素（根元素）
	new Vue({
		//el为element缩写，指定Vue对象绑定的是哪个根元素，通过id绑定
		el : '#id值'
	});
	问题：
		① 为什么一个根元素要绑定一个Vue对象。Vue最主要的作用：声明式渲染,位置
		② 页面，处理多个标签（多个Vue对象）
			Vue构建一个前端项目： 以往前端放在springboot工程里的static或者webapp。
			今后前后端分离。Vue致力于单页面： 通过Vue的组件技术，将不同代码进行 切换来展示不同页面效果。

7、Vue对象如何增加事件：
	- 行间形式加入事件：vue给所有元素增加事件都是行间事件
		<button v-on:事件名="js代码、函数"></button>
	- v-on:事件名="js代码"
	- @事件名="js代码"

	-事件处理函数  (和js提取行间事件一样，不过就是放进Vue对象里的methods中统一管理了，再通过行间事件的方式调用罢了)

	-但是Vue对象methods里的函数中不能直接访问data当中内容，必须要加  this.变量名  访问。

8、Vue：页面数据的自动渲染
	- 数据：
		new Vue({
			el : '#id',
			data : {
				key : value,
				key : value,
				name : 'xjc'
			}
			
		});
		
	- 渲染数据：重点
		① 页面展示data当中的数据
			{{key}}
		② 页面展示methods当中函数的返回值：
			{{函数()}}
		③ 页面当中元素的属性需要和data或者是methods函数的返回值绑定：
			属性的前面 v-bind:属性=""
			
			当属性内部值，是data当中数据时候

			
			
9、函数：
	new Vue({
		el : '#oDiv',
		data : {
			num : 0,
			name : 'hello'
		},
		methods: {
			add : function (){
				this.num ++;
			},
			sub : function (){
				
			}
		}
			
	});
10、获取事件对象（event）：
	- 事件对象：触发一个事件，包含了事件源、坐标、日期......
	
	- 获取事件对象的方式：
		① JS ： 
			btn.onclick = function (event){
				
			}
		② @JQuery
			btn.click(function (event){
				
			});
			
		③ Vue当中：
			<button @click="hello($event)"></button>
			
			new Vue({
				methods : {
					hello :function (event){
						
					}
				}
			});
			

11、事件修饰符：可以通过修饰符来表述事件，默认的行为。
	
	@事件名.事件修饰符="js代码或者函数"
	
	once : 事件触发一次
	stop : 停止事件冒泡
	prevent: 阻止默认事件。 例如阻止form表单的自动提交。
	
-键盘事件	keyup、keydown、keypress
	如keyup.enter
	页面当中元素的属性与数据的绑定一：
	
12、页面元素的双向绑定（双向绑定只适用于三种元素）：input、select、textarea  ，用户可以输入
	v-model="data当中的数据"
	v-model 最主要的作用是用来获取用户输入的值的
13、计算属性：（必须有返回值，调用时不能加()）
	new Vue({
		el : '#id',
		data : {
			
		},
		methods : {
			
		},
		computed : {
			
		}
	});
	
	- 是什么？当页面当中展示的数据是通过复杂运算得到结果。函数放到computed计算属性当中。可以提高性能。
	
	- 结论：
		- 页面当中数据是通过复杂运算得到结果。函数computed当中
		- 计算属性：
			computed :{
				s1 : function (){
					return 'hello';
				}
			}
			这样写可以看出 s1 有点类似data当中的数据 ，s1代表一个值，返回值。
			调用这个函数的时候： s1 不能加括号

14、条件渲染：	11
		v-if="布尔值"		dom节点对象是否存在(操作dom树) 可以配合v-else来使用
		
		v-show="布尔值"		dom对象的display属性
15、列表渲染（就是v-for遍历）：v-for="e in emps" v-for循环遍历数组

16、样式的绑定：
	v-bind:class="{样式名 : 布尔值,样式名 : 布尔值,......}"
		
	v-bind:style="{样式名：值,样式名：值,样式名：值}"
		
17、Vue-实例化多个Vue对象：没有用。 Vue操作一个页面，Vue对象对应一个根元素

18、组件技术：
	- 插件 : Spring Boot工程当中lombok      导入依赖、Idea默认是不支持lombok。
	- 控件 : html当中，用户可以控制的元素控件
	- 组件 : 组成当前应用系统的一部分。
		
		① 前端： 构成当前应用系统的html代码段（比较抽象）
			- 当一段html代码具有通用性，html代码封装成组件（自定义标签）
				<tableInfo></tableInfo>
				
			
		② 后端： 构成当前应用系统的对象
			查询书的信息：
			控制器					业务层					持久层
			@Controller				@Service				@Repository	
			BookController			BookService				BookMapper
		
		
			买书业务：后台有三个组成部分
			IOC、DI：
			IOC ： Inversion of control,获取资源的方式发生了反转。 需要的对象配置文件或者注解或者配置类。 自动装配进来
			DI ：  Dependecy Inject，依赖注入
			
				Service{
					@Autowired
					Mapper mapper;
				}
				
				
			@Component
			@Controller
			@.........
			
	
19、组件的注册：
		new Vue({
			el: '#oDiv',
			data: {
				
			},
			methods: {
				
			},
			components: {
				'wyn': {
					template : '<p>组件代码块<p>',
					data: {
						
					},
					methods: {
						
					},
					computed: {1
						
					},
					components: {
						
					}
				}
			}
		})
		- 局部注册 ： 在某一个Vue对象当中注册了一个组件，组件只能在当前Vue对象对应的根元素当中使用。
		
		- 全局注册 ： 全局注册，任何元素都可以使用
		Vue.component('wyn',{
			template: '<p>全局注册组件代码块</p>',
			data: {
			
			},
			methods: {
			
			},
			computed: {
			
			}
		});
		
		- 组件的抽离(新建一个Vue文件)
		（export default)就代表把这个组件放入根Vue对象(根元素)中的components中
		写完组件的Vue文件后，还需要import，然后在父组件的components里注册。'自定义组件标签名' : Wyn.vue(组件vue文件)
		<template>
			<p>组件代码块</p>
		</template>
		<script>
			export default{
				date: {
					
				},
				methods: {
					
				}
			}
		</script>
		<style>
			//css样式
		</style>

第二章 Vue的脚手架项目：能创建一个属于前端的独立服务器！
0、项目的目录：
	- node_modules : 需要的第三方的依赖，下载
	- public : 公共资源
		① favicon.ico ： 网页的标题前缀图片
		② index.html ： 唯一的一个页面
			<div id="app">
			</div>
			
	- src : 
		① assets：图片
		② components ： 组件（构成当前前端系统的组成部分）
			文件.vue
			<template>
			
			</template>
			<script>
			
			</script>
			<style>
			
			</style>
		③ App.vue : 根组件
		④ main.js : 当前项目js代码
	- package.json : 类似于maven工程里的pom文件
1、组件的嵌套：一个组件当中如何使用另外一个组件
	- 导入组件： 
		import 名字 from '资源路径'
	- 组件注册	
		components : {
			key : value
		}
		key是可以省略的，key名字和value名字一致
	- 使用 <标签名></标签名>
	
2、样式的作用域问题：
	组件内部样式只针对于当前组件有效，不影响其他组件
	<style scoped="scoped">
	
	</style> 	 

3、组件传值： 父子组件    一个组件包裹了另外一个组件
	-- 什么叫组件？
		其实就是自己定义一个标签(template（它的基本html构成）、script（它有什么行为和数据）、style（它的样式）)
		既然组件是一个自定义标签，我们当然也可以自定义它有哪些属性（直接在标签里使用自定义属性并传值，子组件通过props定义属性并接收）
	-- 什么叫组件传值？
		当一个数据是在某一个子组件内部或者在父组件内部，那如何把子组件或者父组件内部的数组传递给不同的组件呢？
		父传子：属性传值；子传父：事件传值
	- 父组件---> 子组件 : 属性传值,当某一个数据在不同子组件当中都要使用，数据抽离到父组件当中。
	
		- 父组件使用了子组件： 给子组件标签自定义属性,属性值定义为需要传递给目标子组件的值。
		
		- 子组件通过props接收：
			① props : ['属性名']     组件内部template  属性名
			② props : {
				属性名 : {
					type : number,	（指定属性数据类型）
					required : true或者false （设定是否必须给该属性传值）
				} 
			}
			
	- 子组件----> 父组件：应用场景只有一个： 在子组件当中触发了一个事件，才需要给父组件传递值。事件传值
		应用场景： 子组件当中定义一个按钮，点击这个按钮的时候，子组件当中的值，传递父组件
		
		注册事件： 触发了子组件当中的事件，以代码的方式触发父组件当中某一个事件。
		
		- 子组件当中有一个事件---> 函数：
			子组件事件触发时，调用一个函数，函数内部写this.$emit('父组件事件名',需要传递给父组件的子组件当中的值)，
			通过this.$emit()函数连锁触发父组件当中的自定义事件，
			父组件标签里通过 v-on：自定义事件名 启用事件 并调用父组件当中的一个函数，并且把$emit里的第二个值作为参数传递给该函数
			this.$emit('父组件事件名',传递值)
			
			***最终：就是子组件通过事件触发函数，通过emit连锁触发父组件事件，并把子组件中的值传递给父组件的函数。
		- 父组件当中使用子组件的位置：
			@事件名="函数"   函数后面不要加().... 
			
			函数: (参数){
				
			}
			
4、VueX ： 数据状态管理框架。定义写数据VueX框架管理
			
5、钩子函数：生命周期
	beforeCreate : vue对象创建之前
	created : Vue对象创建完毕，data和methods数据已经加载完毕。
	
	beforeMount: vue对象与根元素绑定之前,页面还没有展示，但Vue虚拟Dom节点已经创建完毕
	mounted: vue对象和根元素绑定之后。页面已渲染完毕。
	
	beforeUpdate : 页面变化之前调用的函数，页面还没有发生变化，但Vue虚拟Dom节点已经更新创建完毕。
	updated: 页面变化之后调用的函数，页面已经重新更新，重新渲染完毕。
	
	beforeDestory : vue对象销毁之前
	destoried : vue对象销毁之后调用。
	
	组件内部加入：
	created() {
		this.$http.get('https://jsonplaceholder.typicode.com/photos').then(data =>{
			this.pics = data.body;
		});
	}

	
	人： 出生 ----> 18岁  ---> 25 ----> 30  ---> 60 ---> 死亡
	生命周期函数： 函数不需要我们来调用。系统检测
		出生函数(){
			办理出生证明;
		}
		
	Vue的生命周期：
	<div>
	
	</div>
	
	new Vue({
		el : ''
	});
	
	
	


	new Vue({
		el : '#id',
		data(){
			return {
				
			}
		},
		methods : {
			
		},
		computed : {
			
		},
		components : {
			
		},
		props : {
			
		},
		beforeCreated(){
			
		},
		created(){
			
		}
	});
		
		
6、跨域请求：不同服务器之间如何发送请求。
	
	Vue-Resource: 安装依赖（Dependecy）
		- 下载依赖：
			npm install vue-resource --save -dev
		
		- Vue-Resource配置：main.js
			import VueResource from 'vue-resource'
			Vue.use(VueResource)
		
		(发http请求) .get()/.post()/.delete()/.put() 对应rest风格四种请求	
		- this.$http.get(url用?参数名=参数值&参数名=参数值传参).then(response => {给Vue里的成员变量赋值});  response.body
		- this.$http.get(url用rest风格 /参数值/参数值传参，需要提前在controller层方法形参前加注解).then(response => {});
		- this.$http.get(url,{params : { 参数名 : 参数值, 参数名 : 参数值}}).then(response => {});

		(箭头函数的意思，其实就是把参数放在箭头前)
		function abc(a,b){
			return a + b;
		}
		
		(a,b) => {
			return a + b;
		}
		
		
	axios:

9、动态路由：可以给某一个组件定义url地址，用户通过url找到这个组件,定位到某一个位置（路由视图）(router-view)
	Books.vue				/
	Login.vue				/a
	Reg.vue					/b
	.........
	
	http://localhost:8080/a
	
	路由的配置流程：
	1、安装路由模块（导入路由依赖）
		npm install vue-router --save -dev
		
	2、进行Vue-Router配置
		src里面router文件夹，index.js
		
		① 导入VueRouter并使用
		import VueRouter from 'vue-router'
		import Vue from 'vue'
		Vue.use(VueRouter)
		② 创建一个VueRouter对象
		const router = new VueRouter({
			  routes : [
				  {path : '/',component : 组件},
				  {path: '/login', component: login}
				  ......
			  ],
			  mode : 'history'
		  });
		或
		const routes = [
				{path: '/', component: 组件名},
				{path: '/login', component: login}
				.....
		];
		const router = new VueRouter(  {
			routes,
			//可以去掉#字符
			mode : 'history'
		)};

		 ③router导出 export default router
	
	3、main.js当中引入router
		import router from './router'
		new Vue({
			router 	//告诉Vue对象王我要使用这个路由
		});
		
	4、超级链接<a>标签会刷新页面，用户体验不好
		可以替换成<router-link to="/url">xxx</router-link>标签 实现和超链接一样的页面跳转功能，而且页面不重新刷新
9、二级路由、三级路由、四级路由、N级路由

-----------------------------------------------------------------------------
第三章 项目相关高级知识
1、Spring Boot不允许跨服务器访问。
	① 在允许访问的控制器的上面@CrossOrigen
	② spring mvc的配置：通过配置类的方式
		在config包里新建一个类用作SpringMVC的配置，implements WebMvcConfigurer接口
		通过里面的addCorsMappings(CorsRegistry registry)方法配置允许跨域请求。
			registry.addMapping("/**")	//配置允许跨域请求的地址
			           .allowedOrigins("*")	//同上， 用到的时候再查
			           .allowCredentials(true)	
			           .allowedMethods("GET","POST","DELETE","PUT")	//允许跨域访问的rest风格请求类型