1. 什么是集合？Java中集合共有几种？(☆☆☆☆☆)
	集合是Java中数据结构之一，根据集合存储数据管理数据的形式和特点不同，Java中共设置了四种集合(并且集合在Java中都是通过接口的形式存储在java.util包中)
	(1). Collection接口：允许数据重复存储，但是存储无序(是List和Set接口的父接口)
	(2). List接口：允许数据重复存储，存储有序(有索引)
	(3). Set接口：不允许数据重复存储，存储无序
	(4). Map接口：数据以键值对形式存储，键：无序不可重复，值：无序可重复

2. 集合和数组的区别？为什么工作中使用集合而不使用数组？(☆☆)
	(1). 数组长度固定，每次创建数组时必须声明数组的长度！集合长度不固定的，每次创建集合无需声明集合长度，集合中装多少个数据显示的长度就是多少！
	(2). 其实集合底层还是数组，但是集合底层将对数组的所有常用操作全部封装成了方法，访问和操作起来比数组更加方便！

3. 声明集合时，<E>是什么意思？
	<E>称为泛型，泛型规定了集合中所能容纳的数据对应的引用数据类型！
	扩展：泛型可以省略，如果泛型省略，则泛型默认为Object类型！(不建议！)

4. List集合中常用方法有哪些？(☆☆☆☆☆)
	(1). add(Element e)：向集合的末位追加数据！
	(2). add(int index, Element e)：向集合中指定位置插入一个数据！
	(3). addAll(List list)：将指定参数集合中的所有数据追加到原集合的末位！
	(4). remove(int index)：删除集合中指定索引处对应的数据！
	(5). remove(Element e)：删除集合中首次出现的指定数据！
	(6). set(int index, Element e)：将集合中指定索引处对应的数据修改！
	(7). get(int index)：返回集合中指定索引处对应的数据！
	(8). size()：返回集合中数据的个数！
	(9). contains(Element e)：判断集合中是否包含指定的数据！
 	(10). indexOf(Element e)：返回指定数据在集合中首次出现的位置！(没出现则返回-1)
  	(11). clear()：清空集合中所有的数据！
      	(12). isEmpty()：判断集合是否为空(如果为空则返回true)

5. Set集合常用方法？(☆)
	(1). add(Element e)：向集合中添加指定数据！(方法设置了一个布尔返回值表示添加是否成功)
	(2). remove(Element e)：删除集合中的指定数据！
	(3). size()：返回集合中元素个数
        (4). contains(Element e)：判断集合中是否包含指定数据
        (5). clear()：清空集合
        (6). isEmpty()：判断集合是否为空

6. Map集合中的常用方法？(☆☆☆☆☆)
	(1). put(Key key, Value value)：向Map集合中添加指定的键值对数据！
	(2). remove(Key key)：根据键删除Map集合中指定的键值对数据！
	(3). get(Key key)：根据键返回Map集合中对应的值！
	(4). size()：返回Map集合中键值对的个数！
        (5). keySet()：单独将Map集合中所有的键打包到Set集合后并返回
        (6). values()：单独将Map集合中所有的值打包后并返回
        (7). containsKey(Key key)：判断Map集合中是否包含指定的键！
        (8). containsValue(Value value)：判断Map集合中是否包含指定的值！
        (9). clear()：清空集合
        (10). isEmpty()：判断集合是否为空

7. 什么是迭代器？(☆☆)
	迭代器的英文表示Iterator，迭代器是在Java1.5版本之前用于遍历集合的唯一对象！换言之：foreach循环其实是在Java1.5版本之后出现的结构，他的底层就是基于迭代器的方式进行遍历！
	使用迭代器共需要两个步骤：
	(1). 通过集合调用iterator()方法，可以产生一个当前集合专属的迭代器对象！(迭代器就是专门遍历集合用的对象，可以理解为勾爪！)
	(2). 通过迭代器的hasNext()方法判断迭代器想要抓取的数据是否存在！
	(3). 如果存在，则直接通过next()方法抓取数据！

	总结：迭代器只要明白工作原理和操作方式即可！不用刻意研究！

8. 什么是Collections工具类？(☆☆☆)
	面试问：Collection和Collections有什么区别？
	Collection是接口，表示集合
	Collections是类，表示操作集合的工具类！该类中提供了很多辅助集合进行操作的各种好用的方法！

9. List集合常用的实现类有哪些？(☆☆☆)
	(1). ArrayList
	(2). LinkedList

10. ArrayList和LinkedList区别是什么？(☆☆☆☆☆)
	(1). ArrayList底层是数组结构，LinkedList底层链表结构(双端链式结构)
	(2). ArrayList向中间插入或者删除数据的效率低！LinkedList向中间插入或者删除的效率高！
	(3). ArrayList查询某个数据效率高，LinkedList查询某个数据效率低！
	
	总结：ArrayList好还是LinkedList好？都好！
		当数据需要反复插入或者删除的时候使用LinkedList更好
		当数据需要反复检索的时候使用ArrayList更好(工作中使用查询场景更多！)

11. ArrayList和LinkedList的底层详解
	(1). ArrayList：
		1>. 当第一次调用add方法向ArrayList中添加数据时，ArrayList迎来第一次扩容，扩容长度为10
		2>. 当再次调用add方法，每次调用add方法之前，系统都会判断是否需要扩容，如果所容纳的数据超过集合底层默认数组长度，则数组将开始扩容
		3>. 首先数组会默认扩容为原来的1.5倍，如果所需的空间比扩容之后还要大的话，则扩容为所需空间(例如：先在所需20个空间，但是扩容后只有15个长度，则直接扩容为20个长度！)
	扩展：ArrayList负载因子是1(当总数据量为原数组长度*1的时候，需要扩容)，扩容倍数是1.5倍

	(2). LinkedList：
		1>. 每次添加数据的时候都会创建一个Node节点，通过数据链连接之前的节点
		2>. 当进行检索时，会先判断索引在前半段还是后半段，如果在前半段则通过first节点向后依次查找，如果在后半段则通过last节点向前依次查找

12. Set集合底层实现原理？(★★★★★)
	Set集合底层其实是基于Map集合实现的，本质上就是属于Map集合的键！更多底层请了解Map集合底层即可！这里想要讲的是，HashSet为什么可以对数据实现去重操作！
	HashSet在每次调用add方法之前，会先调用添加到集合中的数据的hashcode方法获取数据的哈希码值，然后用添加的数据的哈希码值和集合中已有数据的哈希码值做比较，如果完全不相等，则证明添加的数据是不重复的数据！如果相等，则Set集合会继续调用equals方法对hashCode相同的对象进行进一步的比较！如果equals返回false则证明两个数据不一样，但是如果equals返回true则证明两个对象一样！

13. hashcode是什么？(☆☆☆)
	hashCode是一个由Object类提供的方法，目的是生成对象的哈希码值，而对象的哈希码值其实是通过对象真实的物理地址经过散列函数生成的一个16进制的地址信息！(由于hashCode是基于散列函数生成的虚拟地址，Java开发者为了尽量保证不同对象生成的hashCode不一样，HashCode底层引入了很多算法，尽量保证对象生成的地址不一样，但是还是会存在哈希码值一样的对象！)

14. Map集合常用的实现类有哪些？(☆☆☆☆)
	(1). HashMap：由一个数组 + 链表 + 红黑树
	(2). TreeMap：由树状图构成
	(3). Hashtable：在JDK1.0版本就出现的集合，线程安全，执行效率极低！不允许null当做键或者值！

15. HashMap和Hashtable的区别是什么？(☆☆☆)
	HashMap：允许null当做键或者值，线程不安全的集合，执行效率高！
	Hashtable：不允许null当做键或者值，线程安全的集合，执行效率低！

16. HashMap底层实现原理？(☆☆☆☆)
	HashMap底层其实是由一个数组 + 链表 + 红黑树的结构构成！在1.7版本之前，HashMap仅仅由数组 + 链表构成，1.8版本后对HashMap进行了革新！
	HashMap之所称为HashMap是因为底层是通过Hash算法实现！
	如图所示：


ArrayList 线程不安全但效率高，如果是有参构造按1.5倍扩容，如果是无参，则第一次是10，第二次开始按1.5倍扩容
Vector 线程安全但效率不高，如果是无参，默认为10，满后，就按2倍扩容，如果直接指定大小则每次都按2倍扩容
LinkedList 底层是双端链表，增加和删除效率高，查找和修改ArrayList效率高，另外线程也不安全

HashSet集合底层是 数组 + 链表
HashSet底层其实是HashMap, HashMap的底层是数组+链表+红黑树的数据结构
	
	


		 
	
	
	
	














	