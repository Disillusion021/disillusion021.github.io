1. 什么是面向对象？
	面向对象是一种编程思想，主旨在于凡事都利用对象去完成，利用对象可以将复杂的事情变得简单化！
	总结：做事找对象处理！

2. 什么是对象？
	在Java的世界中任何的已知的事物都可以理解为对象，换言之：在Java的世界中，只要符合如下两个条件就可以称为对象
	(1). 对象必须具有属性和行为
		属性：对象外在具备的能感受到的信息！
		行为：对象具备的能力！
	(2). 对象必须具有唯一性(对象都是独一无二的个体！)

3. Java中如何创建对象？如何使用对象？
	通俗版：Java中的对象是通过类创建而来，简单来说，类就是对象的模板！
	官方版：类是一组具有相同属性和行为的对象的抽象，通过实例化类即可得到对象！

	通过：类名 对象名 = new 类名();  可以构建指定类的对象！
	注意：对象名的命名一定要符合小驼峰命名法！	

4. 成员变量和局部变量的区别？(☆☆☆☆)
	(1). 成员变量：设置在方法外的变量(所有方法共用)，有初始值(可以不赋值)
	(2). 局部变量：设置在方法内的变量(当前方法使用)，无初始值(必须赋值)

5. 类和对象的本质到底是什么？(☆)
	问题1：Java中有没有一种数据类型的变量，该变量中可以容纳一个整数数据？有！int
	问题2：Java中有没有一种数据类型的变量，该变量中可以容纳一个小数数据？有！double
	问题3：Java中有没有一种数据类型的变量，该变量中可以容纳多个整数数据？有！int[]
	问题4：Java中有没有一种数据类型的变量，该变量中既可以容纳一个整数也可以容纳一个小数并且还可以容纳一个字符串？以前没有，但是可以有！我们可以创建出来这种类型！
	类的本质：就是程序员根据程序的需要自定义出来的引用数据类型
	对象的本质：就是通过类(引用数据类型)构建出来的变量而已
	
	引用类型的变量和基本类型的变量有什么区别？
		引用类型的变量除了可以容纳数据之外，还可以调用方法！(引用类型可以构建对象)
		基本类型的变量只可以容纳数据，但是无法调用方法！(基本类型无法构建对象)
	
6. Java主要的内存区域有哪些？每个内存区域中存储什么样的数据？(☆☆☆☆☆)
	(1). 栈(stack)：存放Java程序中所有的局部变量
		基本类型局部变量：变量中存放值
		引用类型局部变量：变量中存放对象的地址
	(2). 堆(heap)：存放通过new构建出来的引用类型的对象
	(3). 方法区(method area)：存储被static修饰的内容(静态域)，存放被final修饰的内容(常量池)，存放Java中所有的关键字代码以及方法的信息！
	
7. Java中this关键字的用法和特点？(☆☆)
	this：指代当前类对象，我们可以通过this来访问类中的属性或者方法！
	this指代调用this所在的方法的对象！
	当局部变量和成员变量重名时，Java默认访问局部变量，这时可以通过this.属性名的形式访问成员变量用于区分

8. Java面向对象的三大特征？(☆☆☆☆☆)
	Java开发者们为了进一步的描述面向对象的编程思想，引入了三个概念详细解释面向对象原则！
	(1). 封装
	(2). 继承
	(3). 多态
	(4). 抽象(抽象被归并到多态思想中)

9. 什么是Java的封装？(☆)
	封装：密封、包装的意思！
	封装就是通过私有化成员变量，阻止其他类随意访问类中的属性，通过对外提供公开的方法，在方法内部添加访问属性的细节，提高程序的安全性和可控性！

10. 封装的标准化流程？(☆☆)
	由于封装本身添加了很多代码，增加了开发的代码量，于是乎Java开发者设计了一套可以快速生成代码的封装模板，供程序员自动生成！
	(1). 私有化成员变量
	(2). 对外提供公开的set和get方法，间接访问属性！
		set方法：有参数，无返回值，方法中利用参数给属性赋值，用于修改属性操作！
		get方法：无参数，有返回值，方法中直接返回属性，用于查询属性操作！

11. 什么是方法的重载(Overload)？(☆☆☆☆☆)
	同一个类中的多个方法，方法名相同，参数列表不同，与返回值类型无关的方法称为方法的重载！
	好处：方便了调用方法的人，少记方法名，提高开发效率！

12. 什么是构造方法(Constructor)？(☆☆☆)
	构造方法又称为构造器，在Java中，构造方法是一种特殊的方法，和定义普通方法不同之处在于，构造方法的方法名必须和类名同名，并且构造方法没有返回值类型(void省略)

13. 构造方法的作用？(☆☆☆)
	(1). 构建对象：构造方法会在构建对象的时候通过new关键字自动调用！
	(2). 初始化成员变量：给成员变量赋值初始值！

14. 构造方法的特点？(☆☆)
	(1). 类中能否不定义构造方法？可以！因为类中默认存在一个无参的构造方法，构造方法内部会将属性自动赋值初始值！
	(2). 类中能否定义多个构造方法？可以！构造方法可以被重载！
	(3). 类中虽然默认存在一个构造方法，但是如果定义了构造方法，则会自动将默认的构造方法覆盖！
 
15. 构造方法和普通方法的区别？(☆☆)
	(1). 普通方法通过构建对象，使用对象调用。构造方法是在构建对象的时候通过new自动调用！
	(2). 普通方法的方法名没有要求。构造方法的方法名必须和类名同名
	(3). 普通方法必须设置返回值类型，void表示无返回值。构造方法无需设置任何返回值类型(不写void)
	
16. 什么是Java继承？(☆)
	Java中继承通过extends关键字声明，Java中继承是发生在类与类之间的关系！即：子类继承父类可以获取父类中所有属性和行为的方式称为继承！
	扩展：继承可以获取父类中私有的内容，只不过无法直接访问而已！
	好处：简化开发代码量，提高代码的复用性！(继承最大的好处是为了引出多态的概念)
	
17. Java继承的特点？(☆☆)
	Java中继承是发生在类与类之间的关系，Java中要求类和类之间的继承必须符合如下两个特征：
	(1). 单继承：一个子类最多只能继承一个父类！
	(2). 单方向：Java中继承只允许自下而上发生，不允许自上而下发生！

18. 什么是super关键字？(☆☆)
	super：指代当前类的父类对象，通过在子类中使用super可以访问父类中的属性或者行为！

19. 什么是方法的重写(Override)？(☆☆☆☆☆)
	重写只会发生在继承的前提下，子类继承父类，将父类中的方法在子类中重新定义的行为称为方法重写！(重写后，子类方法会覆盖继承到的父类的方法)
	重写的特点：方法名相同，参数列表相同，返回值类型相同！
	开闭原则：当程序需求发生变化时，对修改原有代码的行为是关闭的，对扩展新的代码的行为是开放的！
	好处：在不改变原有代码的基础上，扩充方法原本的功能，提高程序的易维护性和可控性！

20. @Override的作用？(☆)
	@Override在Java中表示一个注解，他的作用表示判断所修饰的方法是否是重写方法，就是起到了一个校验的功能！

21. 什么是super()？super()的用法是什么？(☆☆)
	super()：表示访问父类的无参构造方法
	Java中规定在构建子类对象之前必须先构建其父类对象，分配父类对象的内存后，再再父类基础上构建子类对象！

	super()具备如下几个特点：
	(1). 在所有子类中的所有构造方法中，第一行永远隐藏了super()这段代码，表示当子类构造方法运行时，准备构建子类对象之前，第一行通过super()访问父类无参构造方法一定会先创建父类对象！
	(2). super()无论是否声明，永远只能存在于第一行中！
	(3). 我们也可以手动定义super()，通过在super()传递实参来调用父类的有参构造器简化给父类属性赋值的代码量！

	使用super()的好处是什么？简化代码量！
	
	this()：表示访问当前类的无参构造方法(没用！)

22. 什么是Java多态？(☆)
	多态是指同一个方法根据发送对象或者数据的不同，从而产生出不同的行为方式的特征称为多态！

23. 多态的分类？
	多态根据程序的运行阶段不同，共分为两大种类：
	(1). 编译时多态：当编写代码的过程中就已经确定了多态的行为，本质上就是重载！
	(2). 运行时多态：当代码运行过程中才能确定的多态行为称为运行时多态！
	好处：简化开发代码量，如果将父类变量当做方法参数，方法可以接收其所有子类对象数据，变相拓宽了方法接受参数的能力！

24. 满足运行时多态的必要条件有哪些？(☆☆)
	(1). 要有继承
	(2). 要有重写
	(3). 要有父类引用指向子类对象的过程

25. 什么是上转型？什么是下转型？(☆☆)
	Java中正常情况下只允许基本类型之间相互转换，只允许引用类型之间相互转换！
	基本类型：相互转换直接通过强制转换即可！
	引用类型：相互转换就是上转型和下转型，引用类型之间只允许父子类之间相互转换！
	
	上转型：子转父
		Father f = new Son();
		弊端：上转型后的父类变量无法访问子类中独有的属性和行为！所以需要借助下转型

	下转型：父转子
		Son s = (Son) f;
		弊端：想要完成下转型之前必须现有上转型
	
26. instanceof关键字的作用是什么？(☆)
	语法结构：对象 instanceof 类名，用于判断指定对象是否是通过指定类实例化而来，一般就是为了在下转型之前，判断一下是否能完成下转型！

27. 什么是Java的抽象？(☆☆)
	抽象类就是一种特殊的父类，特殊在父类中方法是抽象的，无任何具体方法。
	Java中抽象通过abstract声明，abstract可以修饰类或者方法！
	被abstract修饰的类称为抽象类，抽象类具备如下特点：
	(1). 抽象类中可以声明抽象方法
	(2). 抽象类由于描绘的是未知的事物，无法直接构建对象，但是可以通过多态的形式借助子类构建对象
	(3). 抽象类本质上也算类，所以抽象类中也可以定义成员变量、方法、构造方法！但是一般没有实际意义！

	被abstract修饰的方法称为抽象方法，抽象方法具备如下特点：
	(1). 抽象方法没有方法体，无需声明方法具体代码，只声明方法的特征(方法名、返回值类型、参数列表)
	(2). 抽象方法必须通过子类重写的方式才能赋予抽象方法具体的含义！
	(3). 抽象方法不能存在于普通类中，只能声明在抽象类中！

28. 什么是Java的接口？(☆☆☆☆☆)
	接口和抽象类一样，就是一种特殊的父类，特殊在方法是抽象的，无任何具体实现，
	比抽象类更纯粹，因为只有常量和抽象方法；
	并且打破了类的限制，可以多实现（一个实现类实现多个接口），多继承（接口间），扩展性更好。
	接口和抽象类其一是为了制定规范，其二是解除了模块间的耦合度，提高了程序的维护性和可控性。
	官方版：接口是一些方法特征的集合，在接口中没有方法的实现，只有方法的特征，这些方法再不同的地方被实现具有不同的功能！
	通俗版：接口就是一个特殊的抽象类，结构和性能比抽象类更优！
	优势：提高程序的维护性和可控性，解除模块之间的耦合度！(只有在多人开发的场景下才会使用！)

为什么要用抽象类和接口？
	其一，为了要用其内部的抽象方法定义规范，实现合理的分工开发。
	其二，为了解除各模块间的耦合度，提高程序维护性，可控性和扩展性。

29. 接口和抽象类相比，优势在哪？接口和抽象类的区别是什么？(☆)
	(1). 结构不同：接口在结构上进行了极大的优化，相对于传统的抽象类而言，接口的结构更加纯粹！
	扩展：抽象类中可以声明抽象方法、成员变量、普通方法、构造方法！
	      接口中只允许定义抽象方法，不允许定义普通方法！结构上更加纯粹！
	(2). 实现形式不同：抽象类中的抽象方法需要子类继承后重写来完成具体功能！接口中的抽象方法需要实现类实现后重写来完成具体功能！
	(3). 性能不同：抽象类本质上属于类，还是局限于类的单继承，即：一个子类只能继承一个抽象类！
		       接口打破了类与类之间单继承的局限，类和接口之间可以多实现！即：一个实现类可以同时实现多个接口！(提高了程序结构的可扩展性和可维护性！)
	(4). 结构定义代码不同：接口中所有的结构允许简化定义，即：关键词可以省略，例如接口中的常量可以省略public static final，但是在抽象类中不允许省略！
	总结：工作中使用接口还是抽象类？接口！(无论用接口还是抽象类，我们是为了用内部的抽象方法定义规范！)
	
30. 接口的结构有哪些？(☆☆☆☆☆)
	接口在Java中通过interface声明，在Java1.7版本之前，接口两大结构，1.8版本之后接口共有四大结构：
	(1). 常量：接口中只允许定义常量，不允许定义变量！
		接口中要求常量必须通过public static final声明，可以任意省略(但是默认存在)！只能发生在接口中！
	(2). 抽象方法：接口中只允许定义抽象方法，但是不允许定义普通方法！
		接口中抽象方法必须通过public abstract声明，但是可以任意省略！只能发生在接口中！
	(3). 静态方法：(没有用(鸡肋))
		通过public static修饰的方法，在接口中public可以省略，但是static必须声明！
	(4). 默认方法：(没有用(鸡肋))
		通过public default修饰的方法，在接口中public可以省略，但是default必须声明！

31. 接口和接口之间？类和类之间？接口和类之间的关系是什么？(☆☆☆☆)
	(1). 类和类之间存在继承关系，是单继承
	(2). 类和接口之间存在实现关系，是多实现
	(3). 接口和接口之间存在继承关系，是多继承		如果A类实现了B接口，而B接口继承了C接口，那么，就相当于A类也实现了C接口。
	(4). 类可以先继承类，然后实现多个接口(必须保证先继承，再实现！)

32. 什么是static关键字？static关键字的含义是什么？(☆☆☆☆☆)(面试常考！)
	static关键字在Java中可以从两个方面去理解
	(1). 访问形式：类访问，被static修饰的内容，属于类中的信息，直接通过类名即可访问
	(2). 内存角度：静态，被static修饰的内容在所在类被加载的一瞬间会被分配到方法区中存储，并且唯一存在，直到程序的运行结束后，所有static的数据才会被销毁！

	static在Java中可以修饰如下内容：
	(1). 方法
	(2). 成员变量(注意：不能修饰局部变量)

	扩展：实例变量和静态变量的区别？(☆☆☆☆☆)
	实例变量：指代不被static修饰的成员变量，属于对象的信息，在对象被构建的瞬间会被分配内存(堆空间中)，随着对象的销毁而被销毁(对象的销毁不一定非要等待程序运行结束！)
	静态变量：指代被static修饰的成员变量，属于类的信息，在类被加载的一瞬间就会被分配内存(方法区中)，只有当程序终止的情况下才会被销毁！

	总结：static好还是不好？
		优势：访问速度快，访问形式简单！
		劣势：持续占用内存！
		一般情况下只有当需要被反复使用的属性或者行为时，才会用static修饰！

33. 什么情况下类会被加载？(☆☆☆)
	当尝试访问类中的信息时，Java会将当前的类编译并交给JVM进行处理，在此之前Java编译器会先加载所需类中的所有信息！这个过程就称为类加载的过程，类会在以下三种情况下加载：
	(1). 当尝试构建某个类对象之前，类会被加载！
	(2). 当运行某个类中的main方法时，main方法所在的类会被加载！
	(3). 当尝试通过类名访问类中的静态数据时，类会被加载！
	
34. Java中final关键字详解？(☆☆☆☆)
	在Java中，final被理解为不可改变的，可以修饰的内容有三种：
	(1). 修饰变量(包含成员变量、局部变量、方法参数)：称为常量，常量的值不可被更改，常量必须要有初始值！
		建议：Java中对于常量的命名规范是，每个字母全大写，多个单词用下划线隔开！
	(2). 修饰方法：不可被重写的！(一般情况下，系统提供的方法都是不太建议被重写的！因为都想完成指定的唯一功能！)
	(3). 修饰类：不可被继承！(当一个类中的所有方法都不希望被重写的时候，类会被final修饰，99%的系统类都是不允许被继承的！)

35. transient 短暂的。
	如果一个属性前加了transient那么该属性不会被序列化。
36. 继承是 is 的关系， 对象中包含其他引用类型的变量作为其属性是 has 聚合关系。
37. 调用查找的顺序（会现在本包里找，如果本包里没有会从 import 的包里面找，还会从java.lang 包里找）。
38. 安装JDK时只需要设置 path属性 即可， 不必设置classPath，理由不重要(见廖雪峰)。
	














		






