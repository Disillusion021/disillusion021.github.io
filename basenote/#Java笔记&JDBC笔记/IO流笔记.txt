1. 什么是IO流技术？(☆☆)
	IO流技术是Java用于解决设备与设备之间，或者文档与文档之间数据传输时使用的技术！
	IO流技术的核心思想就是将数据看做流的形式，通过"管道"对流进行传输！
	核心技术：根据传输数据的效率和种类，IO流设置了很多管道的种类！我们需要研究的就是IO流设置了哪些种类的管道！
IO流四步：第一步：获取位置！第二步：建立管道！第三步：传输数据！第四步：关闭资源！
2. IO流中流的种类有哪些？(☆☆☆☆☆)
	按照流向划分，IO流可以分为如下两种：
		(1). 输入流
		(2). 输出流

	按照传输数据的功能和特点，IO流可以分为如下三种：
		(1). 节点流：表示具备数据传输功能的流，是IO流中最基础的流！
			字节流：一次只能传输一个字节的流(只能识别英文)
				字节输入流：InputStream
					read()：一次读取一个字节的字节编码(返回整数结果！)
				字节输出流：OutputStream
					write(char c)：一次写入一个字节的数据！

			字符流：一次只能传输一个字符的流(识别中文)
				字符输入流：Reader
					read()：一次读取一个字符的字节编码(返回整数结果！)
		
				字符输出流：Writer 
					write(char c)：一次写入一个字符的数据或者字符串数据！

		(2). 处理流：本身不具备数据传输的功能，但是可以辅助节点流进行不同功能和种类的数据的传输，可以理解为节点流的延伸和扩展！(系统定义的基于节点流衍生的流)（所以想要用处理流必须要依赖于节点流）
			缓冲流：在节点流的基础上加装缓冲区所有读写操作都是先基于缓冲区进行操作，然后将缓冲区中的数据一次性读/写，提高了数据传输的效率！
				缓冲字节流：
					缓冲字节输入流：BufferedInputStream
					缓冲字节输出流：BufferedOutputStream

				缓冲字符流：
					缓冲字符输入流：BufferedReader
					缓冲字符输出流：BufferedWriter

			对象流：辅助节点流进行对象的数据传输！
				对象输入流：ObjectInputStream
	
				对象输出流：ObjectOutputStream

		(3). 自定义流(程序员定义的基于节点流衍生的流)
3. Java中保存数据有两种方式：
	(1). 用序列化。将被序列化的对象写到文件中。然后你就可以让你的Java程序去读取存储到文件当中的序列化的对象，恢复成原来的对象。
	FileOutputStream fileStream = new FileOutputStream("MyStream.ser");	// 建立文件字节输出流
	ObjectOutputStream os = new ObjectOutputStream(fileStream);	// 建立对象输出流，并连接文件字节输出流
	os.writeObject(characterOne);	// 将charaterOne对象写入，对象会被打成串流送到FileOutputStream来写入文件。
	os.writeObject(characterTwo);	
	os.writeObject(characterThree);
	os.close();	// 关闭流，只要关闭了对象输出流，也会关闭与其连接的文件字节输出流。
 
	当对象被序列化时，被该对象的实例变量所引用的所有对象也会被序列化。(序列化会将对象版图上的所有东西都存储起来)。如果没有被声明transient的实例变量所引用的对象没有实现Serializable,那么序列化时就会抛出异常。 
	(2). 写一个纯文本文件。用其他程序可以解析的特殊字符写到文件中。例如写成用tab字符来分隔的档案以便让电子表格或者数据库应用程序能够应用。
	FileWriter writer = new FileWriter("Foo.txt");
	writer.write("hello foo!");
	writer.close();

4. 利用缓冲流保存和读取数据。
(1) 利用缓冲流保存数据
	File file = new File("D:\\Java教程\\缓冲流练习.txt");
	FileWriter w = new FileWriter(file);
	BufferedWriter bw = new BufferedWriter(w);
	bw.writer("日照香炉生紫烟");
	bw.writer("遥看瀑布挂前川");
	bw.writer("飞流直下三千尺");
	bw.writer("疑是银河落九天");
	bw.close();
ps: 缓冲流自带缓冲区，每次写入的数据是先写入到缓冲区中！
(1). 当缓冲区的数据达到缓冲区容量极限时，系统会自动将缓冲区的数据写入到硬盘中！
(2). 手动调用flush()方法可以直接刷新缓冲区，将缓冲区数据写入到文档中！bw.flush();
(3). 直接调用close()方法关闭流，关闭之前也会将缓冲区的数据写入到文档中！
		
(2) 利用缓冲流读取数据
	File file = new File("D:\\Java教程\\缓冲流练习.txt");
	FileReader r = new FileReader(file);
	BufferedReader br = new BufferReader(r);
	String line = null;
	// 将FileReader链接到BufferedReader以获取更高的效率，它只会在缓冲区读空的时候才会回头从磁盘读取。
	while((line = br.reader()) != null) {
	    System.out.println(line);
	}
	br.close();
























