1. 什么是数据库？
	数据库是一种存储数据的技术，可以提供对数据的维护和操作！数据库根据存储数据的行为和特征可以分为两大类别：
	(1). 关系型数据库：数据以表结构形式存储和维护！通过数据库内置的SQL编程语言操作表中的数据！(适合存储少量数据)
	(2). 非关系型数据库：数据以非表结构形式存储和维护！例如：以键值对形式存储、以图片形式存储、以JSON格式数据存储、以文档形式存储！(适合存储大量数据)

2. 市面上常见的关系型数据库有哪些？(☆☆☆)
	所有关系型数据库的特征和操作基本都以一样的，就是细节部分有差别！
	(1). MySQL数据库：Oracle旗下的数据库产品，数据吞吐量较小，收费低廉
	(2). Oracle数据库：Oracle旗下的数据库产品，数据吞吐量较大，收费高昂
	(3). SQL Server数据库：微软旗下的数据库产品，一般只应用在微软平台下！

3. 如何操作MySQL数据库？
	数据库是一种技术，所以想要操作数据库，需要使用编程语言通过给数据库下达指令，让数据库对数据进行指定的操作！这种编程语言称为：SQL语言(Structure Query Language结构化查询语言)
	操作数据库的可视化工具如下：
	(1). 安装MySQL之后，系统会自带一个MySQL Command Line(命令行窗口)，通过该窗口可以连接数据库进行数据库的操作！
	(2). Navicat：专业操作数据库的可视化工具，这个工具的好处就是，很多命令都被简化为按钮的操作！

4. 如何使用Navicat操作数据库？(☆☆☆)
	(1). 连接数据库：声明账号和密码，账号默认使用系统账号：root，密码：root(自定义)
	(2). 右键连接名新建数据库，申请自定义库，声明数据库名和字符集编码后创建完毕！
	(3). 新建表结构：
		1>. 声明字段名称(命名规范：所有单词全小写，多个单词用下划线隔开！)

		2>. 声明字段类型，MySQL常用的数据类型如下：
			int		整型
			double		小数型
			varchar		字符串型
			date		日期型
			datetime	日期型
			time		日期型
			text		文本类型(装字符串，最多可以容纳64KB大小的数据！)
			longtext	长文本类型(装字符串，最多可以容纳4GB大小的数据！)
			timestamp	时间戳类型(自己研究)

		3>. 声明字段长度
			int类型最多11个长度！
			varchar类型最多255个长度！
			double类型可以声明小数点，长度指的是小数+整数部分的最大长度！
			日期类型无需声明长度！
			文本类型无需声明长度！

5. MySQL的约束是什么？MySQL中约束共有几种？(☆☆☆☆)
	约束就是添加在字段上的一种限制条件，约束规定了某列数据必须符合指定要求！
	MySQL的约束共有四种：
	(1). 非空约束(not null)：限制某列数据不能为null
	(2). 唯一约束(unique)：限制某列数据不能重复(可以允许数据为null)
	(3). 主键约束(primary key)：限制某列数据不能重复、不能为null(唯一 + 非空)
	(4). 外键约束(foreign key)：添加外键约束的列必须要关联另一张表中的主键或者唯一约束的列！而且添加外键约束的列中可以声明的数据只能从其关联的主键字段中获取！

6. 主键约束的特点？(☆☆☆)
	(1). 主键约束可以修饰一列，也可以修饰多列！
	(2). 虽然主键可以修饰多列，但是也称为一个主键，这种主键称为复合主键，即：只有修饰的多列数据完全重复的时候才算违反主键约束！
	(3). 一张表中只允许存在一个主键约束！
	扩展：由于主键约束虽然可以修饰多列，但是必须多列同时重复才算违反约束，如果就是想单独某个列不能重复，除了添加主键约束之外，还可以添加唯一约束！并且一张表中可以存在多个唯一约束！

7. 什么是MySQL的默认值？(☆☆)
	默认值又称为缺省值，表示当某一列不添加数据时，或者添加的数据为null时，数据库会自动使用默认值填充该列！
	注意：MySQL中字符串类型或者日期类型的字段添加默认值时，默认值需要声明单引号或者双引号！
	扩展：timestamp类型通过设置默认值CURRENT_TIMESTAMP可以自动获取当前系统时间填充！
	
8. 什么是自动递增？
	自动递增是一种特殊的默认值，和默认值不同之处在于，自动递增生成的默认值每一次都是递增的，即：每次生成的默认值是不一样的！
	自动递增的创建必须符合以下特点：
	(1). 自动递增只能创建在整数类型的字段上！
	(2). 一张表中只允许一个自动递增！
	(3). 自动递增默认从1开始自增，但是如果添加自动递增的列本身已经存在了数据，那么自动递增会从已有数据的最大值开始继续自增！
	(4). 删除数据后不会导致自动递增重新开始，而是继续生成！这样做的目的就是为了保证数据的不重复性！

9. 什么是SQL语言？
	SQL语言全称为Structure Query Language，表示结构化查询语言，专门用于操作关系型数据库！正式开发时，SQL语言要声明在Java中，由Java来控制数据库，只不过，现在暂时声明在Navicat中，使用SQL语句操作数据！

10. 表与表之间的关联有几种？建表时的规则有哪些？(☆☆☆☆☆)
	(1). 一对一关系(多对一关系)：A表中的一条数据关联B表中的一条数据，例如：订单表和用户表
	(2). 一对多关系：A表中的一条数据关联B表中的多条数据，例如：用户表和订单表
	(3). 多对多关系：

	建表规则如下：
	(1). 当遇到一对一和一对多关系时，可以在一对一的表中添加额外的列，关联另一张表！
		
11. 外键约束的种类有哪些？(☆☆☆☆)
	(1). RESTRICT：当外键关联的主键数据发生删除或者更新时，这种操作是禁止的！(会报错！)
	(2). NO ACTION：效果同RESTRICT
	(3). SET NULL：当外键关联的主键数据发生删除或者更新时，会将外键关联的数据设置为Null
	(4). CASCADE(级联属性)：当外键关联的主键数据发生删除或者更新时，外键跟随主键一起进行操作

	工作中主要用哪种？
		删除时：可以用SET NULL或者RESTRICT
		更新时：可以用CASCADE、可以用SET NULL、可以用RESTRICT

12. 什么是MySQL的索引？(☆☆)
	索引不是工具、不是技术、更不是什么语言，索引是一种添加在某列上，通过某种算法形成的数据结构！(换言之：当某列添加索引后，该列中所有的数据会经过B+Tree算法形成一种特殊的树状图结构，这种结构就成为索引！)，添加索引的目的是为了提高某列条件检索的效率！
	索引是通过一种二分法的算法形成的多路平衡树状图结构！
	
	索引的优势和劣势分别是什么？(☆☆☆☆☆)
	优势：提高某列字段的条件检索效率！
	劣势：拖慢添加和删除的效率(因为每次添加或者删除数据都需要更新索引结构)、占据内存空间！
	
13. 什么情况下适宜添加索引？
	给某列添加主键约束或者唯一约束的时候，MySQL会自动生成该列数据的索引！
	(1). 如果某列条件查询的频率特别高，建议添加索引进行查询！
	(2). 一张表中不适宜添加过多的索引！一般只有主键和外键字段添加即可！
	(3). 添加索引的列中的数据重复性不宜过高！

14. 如何对查询SQL语句进行优化处理？(☆☆☆☆☆)
	(1). 查询语句中不能使用星号进行查询！

	(2). 查询语句中尽量不要使用in或者or关键字声明条件，因为这样会导致MySQL放弃使用索引而改为全表检索！
		建议：使用union或者union all代替in或者or进行查询！

	(3). 查询语句中尽量不要使用is或者is not对null进行判断，否则MySQL会放弃使用索引而改为全表检索！
		建议：尽量在数据库中不要出现null数据！

	(4). 查询语句中尽量在判断条件中不要出现函数！否则MySQL会放弃使用索引而改为全表检索！
		建议：使用其他语法代替！

	(5). 查询语句中一旦出现模糊查询，%开头则MySQL会放弃使用索引而改为全表检索！
		select no, name from emp where name like '%小%'(放弃索引)
		建议：在添加数据的时候，给每列数据都声明一个固定开头！

		name like 'n_%小%'

		n_小明
		n_小强
		n_夯大力
		n_小芳
		n_欧阳小强
	
	(6). 查询语句中尽量不要使用!=进行不等于的判断，否则MySQL会放弃使用索引而改为全表检索！
		建议：使用<>代替!=进行判断(MySQL中不等号有两种书写形式，!=和<>)
		select no, name from student where no <> 1001;

15. 什么是MySQL中的事务？(☆☆☆☆)
	事务的英文表示transaction，事务指的是操作数据库的最小工作单元，一个事务中可能包含若干个增删改语句，这些语句合并到一起称为一个事务！(事务中只包含增删改语句！)事务中的所有SQL语句要么一起运行成功，要么一起运行失败！

16. 事务具备的特点有哪些？(☆☆☆☆☆)
	A(Atomacity)：原子性，一个事务是最小的工作单元，这个事务中的SQL语句不可以继续拆分，也就是说，事务中的所有SQL要么一起成功，要么一起失败！
	C(Consistency)：一致性，事务运行前后，数据是同步的！
	I(Isolation)：隔离性，多个事务之间的操作互不干扰！
	D(Durability)：持久性，事务运行结束后对数据的操作是永久性的！(即：即使数据库崩溃，数据依然存在！)

17. 事务的操作有哪些？(☆☆☆☆)
	MySQL中对于事务的操作有两种
	(1). commit：提交事务(存档)
	(2). rollback：回滚事务(读档)

	MySQL中默认事务的提交方式是自动提交事务，即：每一次执行增删改语句的时候，MySQL都会自动提交当前事务！我们可以通过set autocommit = 0;的方式设置事务的提交改为手动提交！

	总结：手动提交事务好？还是自动提交事务好？都好！(看情况！)

18. 什么是视图？(☆☆☆☆)
	视图其实就是通过查询语句的查询结果形成的一张虚拟表结构！和真正的表结构不同之处在于，视图虽然也是表结构，但是本质是一个查询语句！而表本质是存储在硬盘中的一个文件！该文件中管理了表中存储的数据！
	简单来说：视图就是基于对原表查询后形成的虚拟表，依附于原表，通过修改视图也可以起到修改原表的功能！

17. 视图的优势是什么？
	通过将多表查询的SQL语句的结构形成视图后，可以直接通过操作视图的方式达到操作多表的方式，简化数据结构和代码量！提高开发效率！

18. MySQL 先运行 where筛选， 再group by分组，，再having二筛组， 再最后运行select查询
		

19. 各关键字对表格的处理：where 用于 普通字段的初筛，having 用于聚合函数字段的二筛。
	select	查询列
	where	行筛选，挑出特定行或剔除特定行 ； 不能跟聚合函数， 可以用别名代替子表中出现的聚合函数列名。
	group by 	行归并，归并为分组数
	having	对分组后的数据剔除行筛选组筛选。一般跟聚合函数或组条件。
	
20. 索引
	使用索引是为了提高查询效率，索引需要提前建立好，需要消耗一定的磁盘空间，索引底层是数据结构，二叉树，查找速度自然会大幅提高，但每次增删改会对索引产生影响变更，不过实际项目中都是查询占绝大多数业务场景，所以还是应该多使用索引。

	索引分为：主键索引，唯一索引，普通索引，和全文索引。用的最多的是普通索引，因为它允许为重复数据建立索引，而MySQL自带的全文索引效率不高，一般不使用MySQL自带的全文索引。

	频繁作为查询条件的字段适合创建索引，频繁更新的字段不适合创建索引(如访问次数)。
	唯一性太差的字段不适合单独创建索引(如性别)
	不会出现在where条件中的字段不应该创建索引，索引就是为了提高条件查询的速度，若不是查询条件则没有意义呀。
	
21. SQL执行顺序如下：
	1. from
	2. join
	3. on
	4. where
	5. group by
	6. avg(), sum()...
	7. having
	8. select 
	9. distinct
	10. order by
	


























